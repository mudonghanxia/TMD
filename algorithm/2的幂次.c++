/*
给定一个整数，编写一个函数来判断它是否是 2 的幂次方。
输入: 1
输出: true
解释: 20 = 1

输入: 16
输出: true
解释: 24 = 16

输入: 218
输出: false
*/

// 根据字面意思，按照幂次以此减少，来计算数据是否符合要求。为了加强效率，考虑到数据（非1）末尾元素若是1，3，5，7，9则必定不是2的幂次.
class Solution {
public:
    bool isPowerOfTwo(int n) {
        if(n <= 0) return false;
        while(n != 1){
            if(n % 10 % 2 == 1) return false;
            n /= 2;
        }
        return true;
    }
};

//官方的做法充分考虑到了数据本身是32位，按照位运算仍然可以便捷计算出数据是否为2的幂次，因为2的幂次有一种特殊的性质，在一个int中，32位数据总必定有且只有一位为1，其余位为0，按照与运算，若数据本身是偶数与n-1进行与运算后，所有位数均会清0，若数据本身是奇数，则数据32位中起码会有两个或者更过的1，所以减一后数据不会清零，这便是数据判断是否为2的幂次的一种算法。
class Solution {
public:
    bool isPowerOfTwo(int n) {
        return (n > 0 && (n & (n - 1)) == 0);
    }
};

//那么4的幂次呢？
//先判断为2的幂次，然后判断位是否在奇数位
class Solution {
public:
    bool isPowerOfFour(int n) {
        return n > 0 && ((n & (n-1)) == 0) && (n & 0b01010101010101010101010101010101);
    }
};
